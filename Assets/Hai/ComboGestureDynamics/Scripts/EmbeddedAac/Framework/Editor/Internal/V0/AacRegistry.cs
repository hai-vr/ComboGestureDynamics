using System;
using System.Collections.Generic;
using Hai.ComboGestureDynamics.Scripts.EmbeddedAac.Framework.Components;
using UnityEditor;
using UnityEngine;

namespace Hai.Cge2Aac.Framework.Editor.Internal.V0
{
    public class AacRegistry
    {
        public static AacRegistry Registry { get; } = new AacRegistry();
        private readonly Dictionary<Type, Func<AnimatorAsCode, AnimatorAsCodeHandler>> _handlers = new Dictionary<Type, Func<AnimatorAsCode, AnimatorAsCodeHandler>>();

        public void Add(Type type, Func<AnimatorAsCode, AnimatorAsCodeHandler> component)
        {
            _handlers.Add(type, component);
        }

        public void Create(AnimatorAsCode target)
        {
            if (!target._internal.created)
            {
                target._internal.created = true;
                target._internal.assetKey = "aac_" + Guid.NewGuid();
            }

            foreach (var layer in target.avatar.baseAnimationLayers)
            {
                if (layer.animatorController != null)
                {
                    RemoveAssetsStartingWith("zAutogenerated__" + target._internal.assetKey + "__", typeof(AnimationClip), layer.animatorController);
                }
            }

            NewHandler(target).Create();
        }

        public void Remove(AnimatorAsCode target)
        {
            // NewHandler(target).Remove();
        }

        private AnimatorAsCodeHandler NewHandler(AnimatorAsCode target)
        {
            return _handlers[target.GetType()].Invoke(target);
        }

        private void RemoveAssetsStartingWith(string prefix, Type typeOfAssets, RuntimeAnimatorController animator)
        {
            var allSubAssets = AssetDatabase.LoadAllAssetsAtPath(AssetDatabase.GetAssetPath(animator));
            foreach (var subAsset in allSubAssets)
            {
                if (subAsset != null && subAsset.name.StartsWith(prefix) && subAsset.GetType() == typeOfAssets)
                {
                    // FIXME
                    // AssetDatabase.RemoveObjectFromAsset(subAsset);
                }
            }
        }
    }

    public abstract class AnimatorAsCodeHandler
    {
        public abstract void Create();
        // void Remove();
    }
}
